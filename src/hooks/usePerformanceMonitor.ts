import { useCallback } from 'react';

export const usePerformanceMonitor = () => {
  // üéØ „Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÊ∏¨ÂÆö
  const measurePerformance = useCallback(
    (operationName: string, operation: () => void | Promise<void>) => {
      const markStart = `${operationName}-start`;
      const markEnd = `${operationName}-end`;
      const measureName = `${operationName}-duuration`;

      // Performance API „Åß„Éû„Éº„ÇØ
      performance.mark(markStart);

      try {
        const result = operation();

        //Promise „ÅÆÂ†¥Âêà
        if (result instanceof Promise) {
          return result.finally(() => {
            performance.mark(markEnd);
            performance.measure(measureName, markStart, markEnd);

            const measure = performance.getEntriesByName(measureName)[0];
            const duration = measure.duration;

            if (import.meta.env.DEV) {
              console.log(`‚ö° [Performance] ${operationName}: ${duration.toFixed(2)}ms`);
            }

            // ÈÅÖ„ÅÑÊìç‰Ωú„ÅÆË≠¶Âëä
            if (duration > 1000) {
              console.warn(
                `üêå [Performance] Slow operation detected: ${operationName} took ${duration.toFixed(2)}ms`
              );
            }

            // Êú¨Áï™Áí∞Â¢É„Åß„ÅÆ„Éë„Éï„Ç©„Éº„Éû„É≥„ÇπÁõ£Ë¶ñ
            if (import.meta.env.PROD && duration > 500) {
              // Â§ñÈÉ®Áõ£Ë¶ñ„Çµ„Éº„Éì„Çπ„Å´ÈÄÅ‰ø°
              // sendPerformanceMetric(operationName, duration);
            }
          });
        }

        // ÂêåÊúüÂá¶ÁêÜ„ÅÆÂ†¥Âêà
        performance.mark(markEnd);
        performance.measure(measureName, markStart, markEnd);

        const measure = performance.getEntriesByName(measureName)[0];
        const duration = measure.duration;

        if (import.meta.env.DEV) {
          console.log(`‚ö° [Performance] ${operationName}: ${duration.toFixed(2)}ms`);
        }
        return result;
      } catch (error) {
        performance.mark(markEnd);
        performance.measure(measureName, markStart, markEnd);
        throw error;
      }
    },
    []
  );

  // üéØ Core Web Vitals Áõ£Ë¶ñ
  const monitorCoreWebVitals = useCallback(() => {
    // Largest Contentful Paint (LCP)
    const observeLCP = () => {
      const observer = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        const lastEntry = entries[entries.length - 1];

        if (import.meta.env.DEV) {
          console.log(`üé® [Core Web Vitals] LCP: ${lastEntry.startTime.toFixed(2)}ms`);
        }

        // 2.5Áßí‰ª•‰∏ä„ÅØÊîπÂñÑ„ÅåÂøÖË¶Å
        if (lastEntry.startTime > 2500) {
          console.warn(`‚ö†Ô∏è [Core Web Vitals] Poor LCP: ${lastEntry.startTime.toFixed(2)}ms`);
        }
      });

      observer.observe({ entryTypes: ['largest-contentful-paint'] });
    };

    // Cumulative Layout Shift (CLS)
    const observeCLS = () => {
      let clsValue = 0;
      const observer = new PerformanceObserver((list) => {
        for (const entry of list.getEntries()) {
          if (!(entry as any).hadRecentInput) {
            clsValue += (entry as any).value;
          }
        }

        if (import.meta.env.DEV) {
          console.log(`üé® [Core Web Vitals] CLS: ${clsValue.toFixed(4)}`);
        }

        // 0.1‰ª•‰∏ä„ÅØÊîπÂñÑ„ÅåÂøÖË¶Å
        if (clsValue > 0.1) {
          console.warn(`‚ö†Ô∏è [Core Web Vitals] Poor CLS: ${clsValue.toFixed(4)}`);
        }
      });

      observer.observe({ entryTypes: ['layout-shift'] });
    };

    // First Input Delay (FID)
    const observeFID = () => {
      const observer = new PerformanceObserver((list) => {
        const entries = list.getEntries();
        const firstEntry = entries[0];

        if (import.meta.env.DEV) {
          console.log(
            `‚ö° [Core Web Vitals] FID: ${(firstEntry as any).processingStart - firstEntry.startTime}ms`
          );
        }

        const fid = (firstEntry as any).processingStart - firstEntry.startTime;
        // 100ms‰ª•‰∏ä„ÅØÊîπÂñÑ„ÅåÂøÖË¶Å
        if (fid > 100) {
          console.warn(`‚ö†Ô∏è [Core Web Vitals] Poor FID: ${fid}ms`);
        }
      });

      observer.observe({ entryTypes: ['first-input'] });
    };

    // Áõ£Ë¶ñÈñãÂßã
    try {
      observeLCP();
      observeCLS();
      observeFID();
    } catch (error) {
      console.warn('Core Web Vitals monitoring not supported:', error);
    }
  }, []);

  return {
    measurePerformance,
    monitorCoreWebVitals,
  };
};
